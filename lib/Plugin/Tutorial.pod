#PODNAME: Plugin::Tutorial
#ABSTRACT: Plugin Mini Tutorial


__END__
=pod

=head1 NAME

Plugin::Tutorial - Plugin Mini Tutorial

=head1 VERSION

version 0.001

=head1 WHAT IS A PLUGIN SYSTEM?

I think that a plugin system is just a mechanism that allows you to load 
plugins (code) from your configuration (i.e. without changing the code of your 
core). Plugins make your code modular, extendable, more collaborative and 
perhaps cool. 

=head2 A Few Features of Plugin Systems 

=over

=item useing / loading

A plugin system has to have way to load plugins. For example, with perl's use,
require or modules like Class::Load. It can just use them, load them a base or
as a role, trait etc.

=item starting point

A plugin system has to have somewhere to start. I assume this is always a sub
which gets called from the core when the time has come. 

=item phases

Many plugin systems have phases during which they call plugins, so that plugins
don't all get run at one time and in arbitrary order, but at different times
in your app and when you want them. Let's say a sufficiently real-wordly plugin
systems need this feature.

Phases also allow the plugin-system to be plugin-unaware during compile (use) 
time. We know the phases during use time, but yet which plugins will be loaded
from config, so we execute every plugin registered for that particular phase
when the time for this phase has come.

=item access

Plugin systems allow the plugin a varying amount of access to the core program. 
This being perl with little real closure for objects, I typically just hand all 
of core to the plugin, but a good plugin system might have good reason to be 
more restrictive. Plugin::Simple allows you to choose what you hand down.

=back

=head1 ROLL YOUR OWN!

It's so easy to implement plugins in perl that you don't need a separate 
module. You could just do some variation on this theme. One sub with three
lines of code are enough:

  package YourCore;  
  use Class::Load 'load_class';
  #...
  my $p1=load_plugin ($plugin_class,%args); 
  $p1->doSomething(@opts);  #self is core app

  sub load_plugin {
      my $plugin=shift;
      load_class ($plugin);
      #perhaps use roles to require certain features from your plugins
      $plugin->does('My::Role::Plugin');
      return $plugin->new(@_);
  }

  package MyPlugin;  
  use Moose;
  with 'My::Role::Plugin';

  sub doSomething {
      my $self=shift; #plugin
      my $core=shift; #core app with all settings
  }

That works nicely for moderately complex setups. You can even have plugins 
loading other plugins if you hand over the object with the load_plugin method:

  package MyPlugin;  
  use Moose;
  with 'My::Role::Plugin';

  sub doSomething {
      my $self=shift; #plugin
      my $core=shift; #core app with all of settings/objects saved in it
      $p2=$core->load_plugin ('MyPlugin::Other');      
  }

Plugins loading other plugins are a cheap way of implementing bundles. 

=head2 Restrictions with the above mini implementation

=over 1

=item

Core has to know the methods your plugin implements (e.g. ->doSomething). Not
really a problem. You could standardize them, perhaps call it 'execute' by 
default and require this interface from your My::Role::Plugin.

=item

If you don't allow your plugins to load more plugins you have to know how many
plugins you want to load in advance. You can use the phases in this module's
plugin system to circumvent this problem.

=item

Class::Load doesn't allow you to import functions a la 
  use Module qw (import functions);

Not really a problem. You can always do $plugin::function if you have to. And 
object-oriented plugins look better anyway.

=back

=head1 AUTHOR

Maurice Mengel <mauricemengel@gmail.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Maurice Mengel.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut

